name: bring-changes
on:
  workflow_dispatch:
    inputs:
        feature_branch_name:
          description: 'Name of feature branch to bring changes over from'
          type: string
          required: true
        bring_pipelines:
          description: 'T/F to bring over pipelines from feature branch'
          required: true
          type: boolean
        bring_dataflows:
          description: 'T/F to bring over dataflows from feature branch'
          required: true
          type: boolean
        bring_datasets: 
          description: 'T/F to bring over datasets from feature branch'
          required: true
          type: boolean
jobs:
  copy-changes:
    runs-on: ubuntu-latest
    permissions:
        contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: DEBUG Which branch is this
        run: echo ${{ github.ref_name }}
      - name: Disallow use on main
        if: github.ref_name == 'main'
        uses: actions/github-script@v3
        with:
          script: core.setFailed('Cannot bring changes from feature branch to main. Make fresh branch.')
        
        #Unix script below gets a list of all remote branches and formats it so it may be used later.
        #Process breakdown in order of lines:
        #1. Fetch all branches
        #2. create variable for string to be assigned to named branch_list. List all branches on remote.
        #3. Remove new line characters. 
        #4. Remove all instances of origin/. 
        #5. Remove all instaces of HEAD -> . 
        #6. Remove all instances of main . (Don't want user to create/modify main branch.)
        #7. Replace instances of double spaces between branch names with comma, space, and double quote. 
        #8. Trim first 3 characters off string because of unwanted comma and space. 
        #9. Add double quote to end of string and wrap in square brackets. 
        #10. Echo string so it may be assigned to $GITHUB_OUTPUT and used later.

      - name: Get branch list
        id: get_branch_list
        run: >
          git fetch --all;
          branch_list="$(git branch -r |
          tr -d '\n' |
          sed 's/origin\///g' |
          sed 's/HEAD -> //g' |
          sed 's/\ main\ //g' |
          sed 's/\ \ /\"\,\ \"/g')";
          branch_list="${branch_list:3}";
          branch_list="[$branch_list\"]";
          echo "branch_list=$branch_list" >> $GITHUB_OUTPUT

      - name: Check if branch exists
        if: false == contains(fromJson(steps.get_branch_list.outputs.branch_list), inputs.feature_branch_name)
        uses: actions/github-script@v3
        with:
          script: core.setFailed('Branch entered incorrectly or does not exist.')
      - name: Check if folders selected
        if: false == (inputs.bring_pipelines || inputs.bring_dataflows || inputs.bring_datasets)
        uses: actions/github-script@v3
        with:
          script: core.setFailed('No folders were selected.')
      - name: Set user
        run: git config --global user.name "${{ github.actor }}"
        #TODO TEST EMAIL
      - name: Set email
        run: git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
      - name: Switch to feature branch
        run: git checkout ${{ inputs.feature_branch_name }}
      - name: DEBUG Check path
        run: pwd; ls; echo "-------------"; cd ..; pwd; ls; echo "-------------"; cd ..; ls; echo "-------------"; cd ..; ls; echo "-------------";
      - name: Create moving file
        run: pwd; cd ..; pwd; cd ..; mkdir moving; pwd; ls; echo "-------------"; cd moving; pwd; ls; echo "-------------"; mkdir pipeline; mkdir dataflow; mkdir dataset; pwd; ls; echo "-------------"; cd /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}; pwd; ls
      - name: Store pipelines
        if: inputs.bring_pipelines
        run: cp -a /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/pipeline/. /home/runner/work/moving/pipeline/
      - name: Store dataflows
        if: inputs.bring_dataflows
        run: cp -a /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/dataflow/. /home/runner/work/moving/dataflow/
      - name: Store datasets
        if: inputs.bring_datasets
        run: cp -a /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/dataset/. /home/runner/work/moving/dataset/
      - name: DEBUG Check if stored
        run: > 
          cd /home/runner/work/moving/pipeline/; ls;
          cd /home/runner/work/moving/dataflow/; ls;
          cd /home/runner/work/moving/dataset/; ls
      - name: Checkout current/target branch
        run: git checkout ${{ github.ref_name }}; git branch
      #Copy files from feature branch into current working branch
      - name: Copy pipelines
        if: inputs.bring_pipelines
        run: cp -a -b /home/runner/work/moving/pipeline/. /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/pipeline/
      - name: Copy dataflows
        if: inputs.bring_dataflows
        run: cp -a -b /home/runner/work/moving/dataflow/. /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/dataflow/
      - name: Copy datasets
        if: inputs.bring_datasets
        run: cp -a -b /home/runner/work/moving/dataset/. /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/dataset/
      - name: DEBUG Check changes
        run: > 
          cd /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/pipeline/; ls;
          cd /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/dataflow/; ls;
          cd /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/dataset/; ls;
      - name: Stage changes
        run: git add --all
      - name: Commit changes
        run: git commit -m "Brought changes from ${{ inputs.feature_branch_name }} branch."
      - name: Push origin
        run: git push -u origin ${{ github.ref_name }}